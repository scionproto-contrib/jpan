// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: google/protobuf/timestamp.proto
// Protobuf Java Version: 4.28.2

package com.google.protobuf;

/** Protobuf type {@code google.protobuf.Timestamp} */
public final class Timestamp extends GeneratedMessage
    implements
    // @@protoc_insertion_point(message_implements:google.protobuf.Timestamp)
    TimestampOrBuilder {
  private static final long serialVersionUID = 0L;

  static {
    RuntimeVersion.validateProtobufGencodeVersion(
        RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        Timestamp.class.getName());
  }

  // Use Timestamp.newBuilder() to construct.
  private Timestamp(GeneratedMessage.Builder<?> builder) {
    super(builder);
  }

  private Timestamp() {}

  public static final Descriptors.Descriptor getDescriptor() {
    return TimestampProto.internal_static_google_protobuf_Timestamp_descriptor;
  }

  @Override
  protected FieldAccessorTable internalGetFieldAccessorTable() {
    return TimestampProto.internal_static_google_protobuf_Timestamp_fieldAccessorTable
        .ensureFieldAccessorsInitialized(Timestamp.class, Builder.class);
  }

  public static final int SECONDS_FIELD_NUMBER = 1;
  private long seconds_ = 0L;

  /**
   * <code>int64 seconds = 1 [json_name = "seconds"];</code>
   *
   * @return The seconds.
   */
  @Override
  public long getSeconds() {
    return seconds_;
  }

  public static final int NANOS_FIELD_NUMBER = 2;
  private int nanos_ = 0;

  /**
   * <code>int32 nanos = 2 [json_name = "nanos"];</code>
   *
   * @return The nanos.
   */
  @Override
  public int getNanos() {
    return nanos_;
  }

  private byte memoizedIsInitialized = -1;

  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(CodedOutputStream output) throws java.io.IOException {
    if (seconds_ != 0L) {
      output.writeInt64(1, seconds_);
    }
    if (nanos_ != 0) {
      output.writeInt32(2, nanos_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (seconds_ != 0L) {
      size += CodedOutputStream.computeInt64Size(1, seconds_);
    }
    if (nanos_ != 0) {
      size += CodedOutputStream.computeInt32Size(2, nanos_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof Timestamp)) {
      return super.equals(obj);
    }
    Timestamp other = (Timestamp) obj;

    if (getSeconds() != other.getSeconds()) return false;
    if (getNanos() != other.getNanos()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SECONDS_FIELD_NUMBER;
    hash = (53 * hash) + Internal.hashLong(getSeconds());
    hash = (37 * hash) + NANOS_FIELD_NUMBER;
    hash = (53 * hash) + getNanos();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static Timestamp parseFrom(java.nio.ByteBuffer data)
      throws InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static Timestamp parseFrom(
      java.nio.ByteBuffer data, ExtensionRegistryLite extensionRegistry)
      throws InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static Timestamp parseFrom(ByteString data) throws InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static Timestamp parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry)
      throws InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static Timestamp parseFrom(byte[] data) throws InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static Timestamp parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry)
      throws InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static Timestamp parseFrom(java.io.InputStream input) throws java.io.IOException {
    return GeneratedMessage.parseWithIOException(PARSER, input);
  }

  public static Timestamp parseFrom(
      java.io.InputStream input, ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static Timestamp parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
    return GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
  }

  public static Timestamp parseDelimitedFrom(
      java.io.InputStream input, ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }

  public static Timestamp parseFrom(CodedInputStream input) throws java.io.IOException {
    return GeneratedMessage.parseWithIOException(PARSER, input);
  }

  public static Timestamp parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(Timestamp prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /** Protobuf type {@code google.protobuf.Timestamp} */
  public static final class Builder extends GeneratedMessage.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.protobuf.Timestamp)
      TimestampOrBuilder {
    public static final Descriptors.Descriptor getDescriptor() {
      return TimestampProto.internal_static_google_protobuf_Timestamp_descriptor;
    }

    @Override
    protected FieldAccessorTable internalGetFieldAccessorTable() {
      return TimestampProto.internal_static_google_protobuf_Timestamp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(Timestamp.class, Builder.class);
    }

    // Construct using com.google.protobuf.Timestamp.newBuilder()
    private Builder() {}

    private Builder(BuilderParent parent) {
      super(parent);
    }

    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      seconds_ = 0L;
      nanos_ = 0;
      return this;
    }

    @Override
    public Descriptors.Descriptor getDescriptorForType() {
      return TimestampProto.internal_static_google_protobuf_Timestamp_descriptor;
    }

    @Override
    public Timestamp getDefaultInstanceForType() {
      return Timestamp.getDefaultInstance();
    }

    @Override
    public Timestamp build() {
      Timestamp result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public Timestamp buildPartial() {
      Timestamp result = new Timestamp(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartial0(Timestamp result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.seconds_ = seconds_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.nanos_ = nanos_;
      }
    }

    @Override
    public Builder mergeFrom(Message other) {
      if (other instanceof Timestamp) {
        return mergeFrom((Timestamp) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(Timestamp other) {
      if (other == Timestamp.getDefaultInstance()) return this;
      if (other.getSeconds() != 0L) {
        setSeconds(other.getSeconds());
      }
      if (other.getNanos() != 0) {
        setNanos(other.getNanos());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                seconds_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
            case 16:
              {
                nanos_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private long seconds_;

    /**
     * <code>int64 seconds = 1 [json_name = "seconds"];</code>
     *
     * @return The seconds.
     */
    @Override
    public long getSeconds() {
      return seconds_;
    }

    /**
     * <code>int64 seconds = 1 [json_name = "seconds"];</code>
     *
     * @param value The seconds to set.
     * @return This builder for chaining.
     */
    public Builder setSeconds(long value) {

      seconds_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    /**
     * <code>int64 seconds = 1 [json_name = "seconds"];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSeconds() {
      bitField0_ = (bitField0_ & ~0x00000001);
      seconds_ = 0L;
      onChanged();
      return this;
    }

    private int nanos_;

    /**
     * <code>int32 nanos = 2 [json_name = "nanos"];</code>
     *
     * @return The nanos.
     */
    @Override
    public int getNanos() {
      return nanos_;
    }

    /**
     * <code>int32 nanos = 2 [json_name = "nanos"];</code>
     *
     * @param value The nanos to set.
     * @return This builder for chaining.
     */
    public Builder setNanos(int value) {

      nanos_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    /**
     * <code>int32 nanos = 2 [json_name = "nanos"];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearNanos() {
      bitField0_ = (bitField0_ & ~0x00000002);
      nanos_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.protobuf.Timestamp)
  }

  // @@protoc_insertion_point(class_scope:google.protobuf.Timestamp)
  private static final Timestamp DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new Timestamp();
  }

  public static Timestamp getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final Parser<Timestamp> PARSER =
      new AbstractParser<Timestamp>() {
        @Override
        public Timestamp parsePartialFrom(
            CodedInputStream input, ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static Parser<Timestamp> parser() {
    return PARSER;
  }

  @Override
  public Parser<Timestamp> getParserForType() {
    return PARSER;
  }

  @Override
  public Timestamp getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
